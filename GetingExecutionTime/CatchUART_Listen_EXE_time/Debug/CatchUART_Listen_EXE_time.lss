
CatchUART_Listen_EXE_time.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000a92  00000b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800072  00800072  00000b38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a4f  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101d  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016aa  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  00005f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001230  00000000  00000000  000064ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001985  00000000  00000000  0000771c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
  8a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_SendCommand>:

void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    LCD_MoveCursor(row,col);
    LCD_DisplayString(str_content);
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	63 e0       	ldi	r22, 0x03	; 3
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_SendCommand+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_SendCommand+0x1a>
  ac:	00 00       	nop
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_SendCommand+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_SendCommand+0x30>
  c2:	00 00       	nop
  c4:	dc 2f       	mov	r29, r28
  c6:	d2 95       	swap	r29
  c8:	df 70       	andi	r29, 0x0F	; 15
  ca:	4d 2f       	mov	r20, r29
  cc:	41 70       	andi	r20, 0x01	; 1
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
  d6:	d1 fb       	bst	r29, 1
  d8:	44 27       	eor	r20, r20
  da:	40 f9       	bld	r20, 0
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
  e4:	d2 fb       	bst	r29, 2
  e6:	44 27       	eor	r20, r20
  e8:	40 f9       	bld	r20, 0
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
  f2:	4c 2f       	mov	r20, r28
  f4:	44 1f       	adc	r20, r20
  f6:	44 27       	eor	r20, r20
  f8:	44 1f       	adc	r20, r20
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 102:	8f e9       	ldi	r24, 0x9F	; 159
 104:	9f e0       	ldi	r25, 0x0F	; 15
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_SendCommand+0x74>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_SendCommand+0x7a>
 10c:	00 00       	nop
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_SendCommand+0x8a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_SendCommand+0x90>
 122:	00 00       	nop
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_SendCommand+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_SendCommand+0xa6>
 138:	00 00       	nop
 13a:	dc 2f       	mov	r29, r28
 13c:	df 70       	andi	r29, 0x0F	; 15
 13e:	4c 2f       	mov	r20, r28
 140:	41 70       	andi	r20, 0x01	; 1
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 14a:	d1 fb       	bst	r29, 1
 14c:	44 27       	eor	r20, r20
 14e:	40 f9       	bld	r20, 0
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 158:	d2 fb       	bst	r29, 2
 15a:	44 27       	eor	r20, r20
 15c:	40 f9       	bld	r20, 0
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 166:	4d 2f       	mov	r20, r29
 168:	46 95       	lsr	r20
 16a:	46 95       	lsr	r20
 16c:	46 95       	lsr	r20
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_SendCommand+0xe8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_SendCommand+0xee>
 180:	00 00       	nop
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 18c:	8f e9       	ldi	r24, 0x9F	; 159
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_SendCommand+0xfe>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_SendCommand+0x104>
 196:	00 00       	nop
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <LCD_init>:
 19e:	42 e0       	ldi	r20, 0x02	; 2
 1a0:	63 e0       	ldi	r22, 0x03	; 3
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_SetPinDirection>
 1a8:	42 e0       	ldi	r20, 0x02	; 2
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_SetPinDirection>
 1b2:	42 e0       	ldi	r20, 0x02	; 2
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_SetPinDirection>
 1bc:	42 e0       	ldi	r20, 0x02	; 2
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_SetPinDirection>
 1c6:	42 e0       	ldi	r20, 0x02	; 2
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_SetPinDirection>
 1d0:	42 e0       	ldi	r20, 0x02	; 2
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_SetPinDirection>
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
 1e6:	8e e0       	ldi	r24, 0x0E	; 14
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
 1f2:	08 95       	ret

000001f4 <LCD_DisplayCharacter>:
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	c8 2f       	mov	r28, r24
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	63 e0       	ldi	r22, 0x03	; 3
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 204:	8f e9       	ldi	r24, 0x9F	; 159
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_DisplayCharacter+0x14>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_DisplayCharacter+0x1a>
 20e:	00 00       	nop
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_DisplayCharacter+0x2a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_DisplayCharacter+0x30>
 224:	00 00       	nop
 226:	dc 2f       	mov	r29, r28
 228:	d2 95       	swap	r29
 22a:	df 70       	andi	r29, 0x0F	; 15
 22c:	4d 2f       	mov	r20, r29
 22e:	41 70       	andi	r20, 0x01	; 1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 238:	d1 fb       	bst	r29, 1
 23a:	44 27       	eor	r20, r20
 23c:	40 f9       	bld	r20, 0
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 246:	d2 fb       	bst	r29, 2
 248:	44 27       	eor	r20, r20
 24a:	40 f9       	bld	r20, 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 254:	4c 2f       	mov	r20, r28
 256:	44 1f       	adc	r20, r20
 258:	44 27       	eor	r20, r20
 25a:	44 1f       	adc	r20, r20
 25c:	64 e0       	ldi	r22, 0x04	; 4
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 264:	8f e9       	ldi	r24, 0x9F	; 159
 266:	9f e0       	ldi	r25, 0x0F	; 15
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_DisplayCharacter+0x74>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_DisplayCharacter+0x7a>
 26e:	00 00       	nop
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 27a:	8f e9       	ldi	r24, 0x9F	; 159
 27c:	9f e0       	ldi	r25, 0x0F	; 15
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_DisplayCharacter+0x8a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <LCD_DisplayCharacter+0x90>
 284:	00 00       	nop
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	62 e0       	ldi	r22, 0x02	; 2
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 290:	8f e9       	ldi	r24, 0x9F	; 159
 292:	9f e0       	ldi	r25, 0x0F	; 15
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_DisplayCharacter+0xa0>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_DisplayCharacter+0xa6>
 29a:	00 00       	nop
 29c:	dc 2f       	mov	r29, r28
 29e:	df 70       	andi	r29, 0x0F	; 15
 2a0:	4c 2f       	mov	r20, r28
 2a2:	41 70       	andi	r20, 0x01	; 1
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 2ac:	d1 fb       	bst	r29, 1
 2ae:	44 27       	eor	r20, r20
 2b0:	40 f9       	bld	r20, 0
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 2ba:	d2 fb       	bst	r29, 2
 2bc:	44 27       	eor	r20, r20
 2be:	40 f9       	bld	r20, 0
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 2c8:	4d 2f       	mov	r20, r29
 2ca:	46 95       	lsr	r20
 2cc:	46 95       	lsr	r20
 2ce:	46 95       	lsr	r20
 2d0:	64 e0       	ldi	r22, 0x04	; 4
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 2d8:	8f e9       	ldi	r24, 0x9F	; 159
 2da:	9f e0       	ldi	r25, 0x0F	; 15
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_DisplayCharacter+0xe8>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_DisplayCharacter+0xee>
 2e2:	00 00       	nop
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	9f e0       	ldi	r25, 0x0F	; 15
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_DisplayCharacter+0xfe>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_DisplayCharacter+0x104>
 2f8:	00 00       	nop
 2fa:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 304:	84 31       	cpi	r24, 0x14	; 20
 306:	59 f4       	brne	.+22     	; 0x31e <LCD_DisplayCharacter+0x12a>
 308:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <row_global>
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <row_global>
 312:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 316:	84 31       	cpi	r24, 0x14	; 20
 318:	11 f4       	brne	.+4      	; 0x31e <LCD_DisplayCharacter+0x12a>
 31a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <row_global>
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <LCD_DisplayString>:
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	8c 01       	movw	r16, r24
 32c:	c0 e0       	ldi	r28, 0x00	; 0
 32e:	03 c0       	rjmp	.+6      	; 0x336 <LCD_DisplayString+0x12>
 330:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_DisplayCharacter>
 334:	cf 5f       	subi	r28, 0xFF	; 255
 336:	f8 01       	movw	r30, r16
 338:	ec 0f       	add	r30, r28
 33a:	f1 1d       	adc	r31, r1
 33c:	80 81       	ld	r24, Z
 33e:	81 11       	cpse	r24, r1
 340:	f7 cf       	rjmp	.-18     	; 0x330 <LCD_DisplayString+0xc>
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    col_global = 0 , row_global = 0;
 34a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 34e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <row_global>
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
 358:	08 95       	ret

0000035a <LED_Init>:
#include "LED_interface.h"


void LED_Init(uint8 PORTX , uint8 PIN  )
{
    GPIO_SetPinDirection(PORTX , PIN , OUTPUT_PIN);
 35a:	42 e0       	ldi	r20, 0x02	; 2
 35c:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_SetPinDirection>
 360:	08 95       	ret

00000362 <LED_OnOffPositiveLogic>:
}

void LED_OnOffPositiveLogic(uint8 PORTX , uint8 PIN ,LEDState_config State_value)
{
    if(State_value == LED_OFF)
 362:	41 11       	cpse	r20, r1
 364:	03 c0       	rjmp	.+6      	; 0x36c <LED_OnOffPositiveLogic+0xa>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_LOW);
 366:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 36a:	08 95       	ret
    }
    else if(State_value == LED_ON)
 36c:	41 30       	cpi	r20, 0x01	; 1
 36e:	11 f4       	brne	.+4      	; 0x374 <LED_OnOffPositiveLogic+0x12>
    {
        GPIO_WritePin(PORTX,PIN,LOGIC_HIGH);
 370:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GPIO_WritePin>
 374:	08 95       	ret

00000376 <TimeForFunction>:
}


void TimeForFunction(void)
{
    timeTaken += 256 ;     
 376:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <timeTaken>
 37a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <timeTaken+0x1>
 37e:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <timeTaken+0x2>
 382:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <timeTaken+0x3>
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	af 4f       	sbci	r26, 0xFF	; 255
 38a:	bf 4f       	sbci	r27, 0xFF	; 255
 38c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <timeTaken>
 390:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <timeTaken+0x1>
 394:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <timeTaken+0x2>
 398:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <timeTaken+0x3>
 39c:	08 95       	ret

0000039e <convertInt2Str>:
}

void convertInt2Str(unsigned long int Int2str)
{
 39e:	8f 92       	push	r8
 3a0:	9f 92       	push	r9
 3a2:	af 92       	push	r10
 3a4:	bf 92       	push	r11
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <convertInt2Str+0x1a>
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <convertInt2Str+0x1c>
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <convertInt2Str+0x1e>
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	6b 01       	movw	r12, r22
 3c2:	7c 01       	movw	r14, r24
    unsigned long int Num  = Int2str;
    unsigned long int reversed_Num = 0 ;
    unsigned char I2S[6] = {};
 3c4:	fe 01       	movw	r30, r28
 3c6:	31 96       	adiw	r30, 0x01	; 1
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	df 01       	movw	r26, r30
 3cc:	1d 92       	st	X+, r1
 3ce:	8a 95       	dec	r24
 3d0:	e9 f7       	brne	.-6      	; 0x3cc <convertInt2Str+0x2e>
    unsigned char Count_Num = 0;
    unsigned char ten_multiple = 0 ;
    unsigned char firstZeros = 0 ;
 3d2:	00 e0       	ldi	r16, 0x00	; 0
{
    unsigned long int Num  = Int2str;
    unsigned long int reversed_Num = 0 ;
    unsigned char I2S[6] = {};
    unsigned char Count_Num = 0;
    unsigned char ten_multiple = 0 ;
 3d4:	10 e0       	ldi	r17, 0x00	; 0
}

void convertInt2Str(unsigned long int Int2str)
{
    unsigned long int Num  = Int2str;
    unsigned long int reversed_Num = 0 ;
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	cb 01       	movw	r24, r22
    unsigned char I2S[6] = {};
    unsigned char Count_Num = 0;
    unsigned char ten_multiple = 0 ;
    unsigned char firstZeros = 0 ;
    while(Num > 0)
 3dc:	35 c0       	rjmp	.+106    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
    {
        reversed_Num *= 10 ;
 3de:	dc 01       	movw	r26, r24
 3e0:	cb 01       	movw	r24, r22
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	aa 1f       	adc	r26, r26
 3e8:	bb 1f       	adc	r27, r27
 3ea:	4c 01       	movw	r8, r24
 3ec:	5d 01       	movw	r10, r26
 3ee:	88 0c       	add	r8, r8
 3f0:	99 1c       	adc	r9, r9
 3f2:	aa 1c       	adc	r10, r10
 3f4:	bb 1c       	adc	r11, r11
 3f6:	88 0c       	add	r8, r8
 3f8:	99 1c       	adc	r9, r9
 3fa:	aa 1c       	adc	r10, r10
 3fc:	bb 1c       	adc	r11, r11
 3fe:	88 0e       	add	r8, r24
 400:	99 1e       	adc	r9, r25
 402:	aa 1e       	adc	r10, r26
 404:	bb 1e       	adc	r11, r27
        if(firstZeros == 0)
 406:	01 11       	cpse	r16, r1
 408:	0f c0       	rjmp	.+30     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
        {
            if( (Num %10 ) == 0)
 40a:	c7 01       	movw	r24, r14
 40c:	b6 01       	movw	r22, r12
 40e:	2a e0       	ldi	r18, 0x0A	; 10
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	0e 94 25 05 	call	0xa4a	; 0xa4a <__udivmodsi4>
 41a:	67 2b       	or	r22, r23
 41c:	68 2b       	or	r22, r24
 41e:	69 2b       	or	r22, r25
 420:	11 f4       	brne	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
            {
                ten_multiple++;
 422:	1f 5f       	subi	r17, 0xFF	; 255
 424:	01 c0       	rjmp	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
            }
            else
            {
                firstZeros = 1 ;
 426:	01 e0       	ldi	r16, 0x01	; 1
            }
        }
        reversed_Num += Num %10 ;
 428:	c7 01       	movw	r24, r14
 42a:	b6 01       	movw	r22, r12
 42c:	2a e0       	ldi	r18, 0x0A	; 10
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	0e 94 25 05 	call	0xa4a	; 0xa4a <__udivmodsi4>
 438:	68 0d       	add	r22, r8
 43a:	79 1d       	adc	r23, r9
 43c:	8a 1d       	adc	r24, r10
 43e:	9b 1d       	adc	r25, r11
        Num /= 10;
 440:	c2 2e       	mov	r12, r18
 442:	d3 2e       	mov	r13, r19
 444:	e4 2e       	mov	r14, r20
 446:	f5 2e       	mov	r15, r21
    unsigned long int reversed_Num = 0 ;
    unsigned char I2S[6] = {};
    unsigned char Count_Num = 0;
    unsigned char ten_multiple = 0 ;
    unsigned char firstZeros = 0 ;
    while(Num > 0)
 448:	c1 14       	cp	r12, r1
 44a:	d1 04       	cpc	r13, r1
 44c:	e1 04       	cpc	r14, r1
 44e:	f1 04       	cpc	r15, r1
 450:	31 f6       	brne	.-116    	; 0x3de <convertInt2Str+0x40>
 452:	00 e0       	ldi	r16, 0x00	; 0
 454:	13 c0       	rjmp	.+38     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
        reversed_Num += Num %10 ;
        Num /= 10;
    }
    while(reversed_Num > 0)
    {
        I2S[Count_Num] = (reversed_Num % 10) + '0';
 456:	2a e0       	ldi	r18, 0x0A	; 10
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	0e 94 25 05 	call	0xa4a	; 0xa4a <__udivmodsi4>
 462:	e1 e0       	ldi	r30, 0x01	; 1
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ec 0f       	add	r30, r28
 468:	fd 1f       	adc	r31, r29
 46a:	e0 0f       	add	r30, r16
 46c:	f1 1d       	adc	r31, r1
 46e:	60 5d       	subi	r22, 0xD0	; 208
 470:	60 83       	st	Z, r22
        reversed_Num /= 10;
 472:	62 2f       	mov	r22, r18
 474:	73 2f       	mov	r23, r19
 476:	84 2f       	mov	r24, r20
 478:	95 2f       	mov	r25, r21
        Count_Num++;
 47a:	0f 5f       	subi	r16, 0xFF	; 255
            }
        }
        reversed_Num += Num %10 ;
        Num /= 10;
    }
    while(reversed_Num > 0)
 47c:	61 15       	cp	r22, r1
 47e:	71 05       	cpc	r23, r1
 480:	81 05       	cpc	r24, r1
 482:	91 05       	cpc	r25, r1
 484:	41 f7       	brne	.-48     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 486:	0a c0       	rjmp	.+20     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
        reversed_Num /= 10;
        Count_Num++;
    }
    while(ten_multiple)
    {
        I2S[Count_Num] = '0';
 488:	e1 e0       	ldi	r30, 0x01	; 1
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ec 0f       	add	r30, r28
 48e:	fd 1f       	adc	r31, r29
 490:	e0 0f       	add	r30, r16
 492:	f1 1d       	adc	r31, r1
 494:	80 e3       	ldi	r24, 0x30	; 48
 496:	80 83       	st	Z, r24
        Count_Num++;
 498:	0f 5f       	subi	r16, 0xFF	; 255
        ten_multiple--;
 49a:	11 50       	subi	r17, 0x01	; 1
    {
        I2S[Count_Num] = (reversed_Num % 10) + '0';
        reversed_Num /= 10;
        Count_Num++;
    }
    while(ten_multiple)
 49c:	11 11       	cpse	r17, r1
 49e:	f4 cf       	rjmp	.-24     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
    {
        I2S[Count_Num] = '0';
        Count_Num++;
        ten_multiple--;
    }
    I2S[Count_Num] = '\0';
 4a0:	e1 e0       	ldi	r30, 0x01	; 1
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	ec 0f       	add	r30, r28
 4a6:	fd 1f       	adc	r31, r29
 4a8:	e0 0f       	add	r30, r16
 4aa:	f1 1d       	adc	r31, r1
 4ac:	10 82       	st	Z, r1
    LCD_DisplayString( (unsigned char *)I2S);
 4ae:	ce 01       	movw	r24, r28
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	0e 94 92 01 	call	0x324	; 0x324 <LCD_DisplayString>
    LCD_DisplayString( (unsigned char *)" Tick");
 4b6:	8c e6       	ldi	r24, 0x6C	; 108
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 92 01 	call	0x324	; 0x324 <LCD_DisplayString>
}
 4be:	26 96       	adiw	r28, 0x06	; 6
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	9f 90       	pop	r9
 4e0:	8f 90       	pop	r8
 4e2:	08 95       	ret

000004e4 <main>:
void TimeForFunction(void);
void convertInt2Str(unsigned long int Int2str);


int main(void)
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	1f 92       	push	r1
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
    LCD_init();
 4ee:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_init>
	USART_Init();
 4f2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <USART_Init>
    ADC_Init();
 4f6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ADC_Init>
    LED_Init(PORTC_ID,PIN0_ID);
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	0e 94 ad 01 	call	0x35a	; 0x35a <LED_Init>
    LED_OnOffPositiveLogic(PORTC_ID,PIN0_ID,0);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	0e 94 b1 01 	call	0x362	; 0x362 <LED_OnOffPositiveLogic>
    Timer0_Init();
 50c:	0e 94 94 04 	call	0x928	; 0x928 <Timer0_Init>
    Timer0_SetCallBack(TimeForFunction);
 510:	8b eb       	ldi	r24, 0xBB	; 187
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 64 04 	call	0x8c8	; 0x8c8 <Timer0_SetCallBack>

    Timer0_ProvideClock();
 518:	0e 94 ab 04 	call	0x956	; 0x956 <Timer0_ProvideClock>


    /*	catch uart data */
    uint8 u8Ind = 0;
	uint8 txMsg_UART[4] ={};
	uint8 u8Data = 0;
 51c:	19 82       	std	Y+1, r1	; 0x01
	boolean update_thresould_temp = FALSE ;
	
    /*	Check if received any new data */
    while(!UART_receiveByteUnblocking(&u8Data)){
 51e:	09 c0       	rjmp	.+18     	; 0x532 <main+0x4e>
        
        
        
        if(u8Data == 'G') /*	Will update flag of Threshold Temperature */
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	87 34       	cpi	r24, 0x47	; 71
 524:	31 f4       	brne	.+12     	; 0x532 <main+0x4e>
        {
            LED_OnOffPositiveLogic(PORTC_ID,PIN0_ID,1);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 b1 01 	call	0x362	; 0x362 <LED_OnOffPositiveLogic>
            break;
 530:	06 c0       	rjmp	.+12     	; 0x53e <main+0x5a>
	uint8 txMsg_UART[4] ={};
	uint8 u8Data = 0;
	boolean update_thresould_temp = FALSE ;
	
    /*	Check if received any new data */
    while(!UART_receiveByteUnblocking(&u8Data)){
 532:	ce 01       	movw	r24, r28
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	0e 94 1c 05 	call	0xa38	; 0xa38 <UART_receiveByteUnblocking>
 53a:	88 23       	and	r24, r24
 53c:	89 f3       	breq	.-30     	; 0x520 <main+0x3c>
   
    }
	


    Timer0_StopClock();
 53e:	0e 94 a7 04 	call	0x94e	; 0x94e <Timer0_StopClock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 542:	2f e7       	ldi	r18, 0x7F	; 127
 544:	8a e1       	ldi	r24, 0x1A	; 26
 546:	96 e0       	ldi	r25, 0x06	; 6
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	80 40       	sbci	r24, 0x00	; 0
 54c:	90 40       	sbci	r25, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <main+0x64>
 550:	00 c0       	rjmp	.+0      	; 0x552 <main+0x6e>
 552:	00 00       	nop
 554:	2f e7       	ldi	r18, 0x7F	; 127
 556:	8a e1       	ldi	r24, 0x1A	; 26
 558:	96 e0       	ldi	r25, 0x06	; 6
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0x76>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x80>
 564:	00 00       	nop
 566:	2f e7       	ldi	r18, 0x7F	; 127
 568:	8a e1       	ldi	r24, 0x1A	; 26
 56a:	96 e0       	ldi	r25, 0x06	; 6
 56c:	21 50       	subi	r18, 0x01	; 1
 56e:	80 40       	sbci	r24, 0x00	; 0
 570:	90 40       	sbci	r25, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <main+0x88>
 574:	00 c0       	rjmp	.+0      	; 0x576 <main+0x92>
 576:	00 00       	nop
	
	_delay_ms(2000);
    _delay_ms(2000);
    _delay_ms(2000);
    
    LCD_ClearScreen();
 578:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_ClearScreen>
       
    convertInt2Str(timeTaken + TCNT0);
 57c:	22 b7       	in	r18, 0x32	; 50
 57e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <timeTaken>
 582:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <timeTaken+0x1>
 586:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <timeTaken+0x2>
 58a:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <timeTaken+0x3>
 58e:	bc 01       	movw	r22, r24
 590:	cd 01       	movw	r24, r26
 592:	62 0f       	add	r22, r18
 594:	71 1d       	adc	r23, r1
 596:	81 1d       	adc	r24, r1
 598:	91 1d       	adc	r25, r1
 59a:	0e 94 cf 01 	call	0x39e	; 0x39e <convertInt2Str>
 59e:	ff cf       	rjmp	.-2      	; 0x59e <main+0xba>

000005a0 <ADC_Init>:
}

void ADC_Init(void)
{
    /*  Set ADC Voltage Reference    */
    ADMUX = (ADMUX & 0x3F)| ( ADC_ConfigTypeParam.ADC_ReferenceVoltage_Value << 6) ;
 5a0:	27 b1       	in	r18, 0x07	; 7
 5a2:	e0 e6       	ldi	r30, 0x60	; 96
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	91 81       	ldd	r25, Z+1	; 0x01
 5a8:	30 e4       	ldi	r19, 0x40	; 64
 5aa:	93 9f       	mul	r25, r19
 5ac:	c0 01       	movw	r24, r0
 5ae:	11 24       	eor	r1, r1
 5b0:	92 2f       	mov	r25, r18
 5b2:	9f 73       	andi	r25, 0x3F	; 63
 5b4:	89 2b       	or	r24, r25
 5b6:	87 b9       	out	0x07, r24	; 7
    /*  Set ADC result conversion Adjustment*/
    if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Right)
 5b8:	82 81       	ldd	r24, Z+2	; 0x02
 5ba:	81 11       	cpse	r24, r1
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <ADC_Init+0x26>
        CLEAR_BIT(ADMUX, ADLAR);
 5be:	87 b1       	in	r24, 0x07	; 7
 5c0:	8f 7d       	andi	r24, 0xDF	; 223
 5c2:	87 b9       	out	0x07, r24	; 7
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <ADC_Init+0x30>
    else if(ADC_ConfigTypeParam.ADC_ValueAdjustment_value == ADC_Adjust_Left)
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	19 f4       	brne	.+6      	; 0x5d0 <ADC_Init+0x30>
        SET_BIT(ADMUX, ADLAR);
 5ca:	87 b1       	in	r24, 0x07	; 7
 5cc:	80 62       	ori	r24, 0x20	; 32
 5ce:	87 b9       	out	0x07, r24	; 7
    /*  Enable  ADC     */
    SET_BIT(ADCSRA , ADEN);
 5d0:	86 b1       	in	r24, 0x06	; 6
 5d2:	80 68       	ori	r24, 0x80	; 128
 5d4:	86 b9       	out	0x06, r24	; 6
    /*  Set ADC Working Mode*/
    if(ADC_ConfigTypeParam.ADC_WorkingMode_value == Single_Conversion_Mode)
 5d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5da:	88 23       	and	r24, r24
 5dc:	c9 f0       	breq	.+50     	; 0x610 <ADC_Init+0x70>
    {
        /*  Do Nothing as this mode is simply start converion @ anytime want to read channel    */
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Free_Running_Mode)
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	39 f4       	brne	.+14     	; 0x5f0 <ADC_Init+0x50>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
 5e2:	86 b1       	in	r24, 0x06	; 6
 5e4:	80 62       	ori	r24, 0x20	; 32
 5e6:	86 b9       	out	0x06, r24	; 6
        /*  Then choose option  1 Free Running mode from ADC Auto Trigger Source*/
        SFIOR = (SFIOR & 0x0F);
 5e8:	80 b7       	in	r24, 0x30	; 48
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	80 bf       	out	0x30, r24	; 48
 5ee:	10 c0       	rjmp	.+32     	; 0x610 <ADC_Init+0x70>
    }
    else if (ADC_ConfigTypeParam.ADC_WorkingMode_value == Auto_Trigger_Mode)
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	71 f4       	brne	.+28     	; 0x610 <ADC_Init+0x70>
    {
        /*  Can do that by set  Auto trigger  bit   */
        SET_BIT(ADCSRA , ADATE);
 5f4:	86 b1       	in	r24, 0x06	; 6
 5f6:	80 62       	ori	r24, 0x20	; 32
 5f8:	86 b9       	out	0x06, r24	; 6
        /*  choose Auto trigger source*/
        SFIOR = (SFIOR & 0x0F) | (ADC_ConfigTypeParam.ADC_AutoTriggerSource_value << ADTS0);
 5fa:	20 b7       	in	r18, 0x30	; 48
 5fc:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 600:	30 e2       	ldi	r19, 0x20	; 32
 602:	93 9f       	mul	r25, r19
 604:	c0 01       	movw	r24, r0
 606:	11 24       	eor	r1, r1
 608:	92 2f       	mov	r25, r18
 60a:	9f 70       	andi	r25, 0x0F	; 15
 60c:	89 2b       	or	r24, r25
 60e:	80 bf       	out	0x30, r24	; 48
    }
    /*  Set Prescaler for ADC   */
    ADCSRA = (ADCSRA & 0xF8) | (ADC_ConfigTypeParam.ADC_PrescalerSelect_value & 0x07);
 610:	96 b1       	in	r25, 0x06	; 6
 612:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 616:	98 7f       	andi	r25, 0xF8	; 248
 618:	87 70       	andi	r24, 0x07	; 7
 61a:	89 2b       	or	r24, r25
 61c:	86 b9       	out	0x06, r24	; 6
    #if (ADC_Interrupt_State == ADC_Interrupt_Enable)
        SET_BIT(ADCSRA,ADIE);
        /*  Enable GLobal Interrupt   */
        SET_BIT(SREG,7);
    #elif (ADC_Interrupt_State == ADC_Interrupt_Disable)
        CLEAR_BIT(ADCSRA,ADIE);
 61e:	86 b1       	in	r24, 0x06	; 6
 620:	87 7f       	andi	r24, 0xF7	; 247
 622:	86 b9       	out	0x06, r24	; 6
 624:	08 95       	ret

00000626 <GPIO_SetPinDirection>:

        }
    }

    return returned_value ;
}
 626:	84 30       	cpi	r24, 0x04	; 4
 628:	08 f0       	brcs	.+2      	; 0x62c <GPIO_SetPinDirection+0x6>
 62a:	d2 c0       	rjmp	.+420    	; 0x7d0 <GPIO_SetPinDirection+0x1aa>
 62c:	68 30       	cpi	r22, 0x08	; 8
 62e:	08 f0       	brcs	.+2      	; 0x632 <GPIO_SetPinDirection+0xc>
 630:	cf c0       	rjmp	.+414    	; 0x7d0 <GPIO_SetPinDirection+0x1aa>
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	d1 f1       	breq	.+116    	; 0x6aa <GPIO_SetPinDirection+0x84>
 636:	38 f0       	brcs	.+14     	; 0x646 <GPIO_SetPinDirection+0x20>
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	09 f4       	brne	.+2      	; 0x63e <GPIO_SetPinDirection+0x18>
 63c:	68 c0       	rjmp	.+208    	; 0x70e <GPIO_SetPinDirection+0xe8>
 63e:	83 30       	cpi	r24, 0x03	; 3
 640:	09 f4       	brne	.+2      	; 0x644 <GPIO_SetPinDirection+0x1e>
 642:	96 c0       	rjmp	.+300    	; 0x770 <GPIO_SetPinDirection+0x14a>
 644:	08 95       	ret
 646:	41 11       	cpse	r20, r1
 648:	10 c0       	rjmp	.+32     	; 0x66a <GPIO_SetPinDirection+0x44>
 64a:	2a b3       	in	r18, 0x1a	; 26
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <GPIO_SetPinDirection+0x30>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <GPIO_SetPinDirection+0x2c>
 65a:	80 95       	com	r24
 65c:	92 2f       	mov	r25, r18
 65e:	98 23       	and	r25, r24
 660:	9a bb       	out	0x1a, r25	; 26
 662:	9b b3       	in	r25, 0x1b	; 27
 664:	89 23       	and	r24, r25
 666:	8b bb       	out	0x1b, r24	; 27
 668:	08 95       	ret
 66a:	41 30       	cpi	r20, 0x01	; 1
 66c:	81 f4       	brne	.+32     	; 0x68e <GPIO_SetPinDirection+0x68>
 66e:	2a b3       	in	r18, 0x1a	; 26
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <GPIO_SetPinDirection+0x54>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <GPIO_SetPinDirection+0x50>
 67e:	98 2f       	mov	r25, r24
 680:	90 95       	com	r25
 682:	92 23       	and	r25, r18
 684:	9a bb       	out	0x1a, r25	; 26
 686:	9b b3       	in	r25, 0x1b	; 27
 688:	89 2b       	or	r24, r25
 68a:	8b bb       	out	0x1b, r24	; 27
 68c:	08 95       	ret
 68e:	42 30       	cpi	r20, 0x02	; 2
 690:	09 f0       	breq	.+2      	; 0x694 <GPIO_SetPinDirection+0x6e>
 692:	9e c0       	rjmp	.+316    	; 0x7d0 <GPIO_SetPinDirection+0x1aa>
 694:	2a b3       	in	r18, 0x1a	; 26
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <GPIO_SetPinDirection+0x7a>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <GPIO_SetPinDirection+0x76>
 6a4:	82 2b       	or	r24, r18
 6a6:	8a bb       	out	0x1a, r24	; 26
 6a8:	08 95       	ret
 6aa:	41 11       	cpse	r20, r1
 6ac:	10 c0       	rjmp	.+32     	; 0x6ce <GPIO_SetPinDirection+0xa8>
 6ae:	27 b3       	in	r18, 0x17	; 23
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <GPIO_SetPinDirection+0x94>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <GPIO_SetPinDirection+0x90>
 6be:	80 95       	com	r24
 6c0:	92 2f       	mov	r25, r18
 6c2:	98 23       	and	r25, r24
 6c4:	97 bb       	out	0x17, r25	; 23
 6c6:	98 b3       	in	r25, 0x18	; 24
 6c8:	89 23       	and	r24, r25
 6ca:	88 bb       	out	0x18, r24	; 24
 6cc:	08 95       	ret
 6ce:	41 30       	cpi	r20, 0x01	; 1
 6d0:	81 f4       	brne	.+32     	; 0x6f2 <GPIO_SetPinDirection+0xcc>
 6d2:	27 b3       	in	r18, 0x17	; 23
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <GPIO_SetPinDirection+0xb8>
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	6a 95       	dec	r22
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <GPIO_SetPinDirection+0xb4>
 6e2:	98 2f       	mov	r25, r24
 6e4:	90 95       	com	r25
 6e6:	92 23       	and	r25, r18
 6e8:	97 bb       	out	0x17, r25	; 23
 6ea:	98 b3       	in	r25, 0x18	; 24
 6ec:	89 2b       	or	r24, r25
 6ee:	88 bb       	out	0x18, r24	; 24
 6f0:	08 95       	ret
 6f2:	42 30       	cpi	r20, 0x02	; 2
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <GPIO_SetPinDirection+0xd2>
 6f6:	6c c0       	rjmp	.+216    	; 0x7d0 <GPIO_SetPinDirection+0x1aa>
 6f8:	27 b3       	in	r18, 0x17	; 23
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <GPIO_SetPinDirection+0xde>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <GPIO_SetPinDirection+0xda>
 708:	82 2b       	or	r24, r18
 70a:	87 bb       	out	0x17, r24	; 23
 70c:	08 95       	ret
 70e:	41 11       	cpse	r20, r1
 710:	10 c0       	rjmp	.+32     	; 0x732 <GPIO_SetPinDirection+0x10c>
 712:	24 b3       	in	r18, 0x14	; 20
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <GPIO_SetPinDirection+0xf8>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	6a 95       	dec	r22
 720:	e2 f7       	brpl	.-8      	; 0x71a <GPIO_SetPinDirection+0xf4>
 722:	80 95       	com	r24
 724:	92 2f       	mov	r25, r18
 726:	98 23       	and	r25, r24
 728:	94 bb       	out	0x14, r25	; 20
 72a:	95 b3       	in	r25, 0x15	; 21
 72c:	89 23       	and	r24, r25
 72e:	85 bb       	out	0x15, r24	; 21
 730:	08 95       	ret
 732:	41 30       	cpi	r20, 0x01	; 1
 734:	81 f4       	brne	.+32     	; 0x756 <GPIO_SetPinDirection+0x130>
 736:	24 b3       	in	r18, 0x14	; 20
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <GPIO_SetPinDirection+0x11c>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <GPIO_SetPinDirection+0x118>
 746:	98 2f       	mov	r25, r24
 748:	90 95       	com	r25
 74a:	92 23       	and	r25, r18
 74c:	94 bb       	out	0x14, r25	; 20
 74e:	95 b3       	in	r25, 0x15	; 21
 750:	89 2b       	or	r24, r25
 752:	85 bb       	out	0x15, r24	; 21
 754:	08 95       	ret
 756:	42 30       	cpi	r20, 0x02	; 2
 758:	d9 f5       	brne	.+118    	; 0x7d0 <GPIO_SetPinDirection+0x1aa>
 75a:	24 b3       	in	r18, 0x14	; 20
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <GPIO_SetPinDirection+0x140>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	6a 95       	dec	r22
 768:	e2 f7       	brpl	.-8      	; 0x762 <GPIO_SetPinDirection+0x13c>
 76a:	82 2b       	or	r24, r18
 76c:	84 bb       	out	0x14, r24	; 20
 76e:	08 95       	ret
 770:	41 11       	cpse	r20, r1
 772:	10 c0       	rjmp	.+32     	; 0x794 <GPIO_SetPinDirection+0x16e>
 774:	21 b3       	in	r18, 0x11	; 17
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <GPIO_SetPinDirection+0x15a>
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <GPIO_SetPinDirection+0x156>
 784:	80 95       	com	r24
 786:	92 2f       	mov	r25, r18
 788:	98 23       	and	r25, r24
 78a:	91 bb       	out	0x11, r25	; 17
 78c:	92 b3       	in	r25, 0x12	; 18
 78e:	89 23       	and	r24, r25
 790:	82 bb       	out	0x12, r24	; 18
 792:	08 95       	ret
 794:	41 30       	cpi	r20, 0x01	; 1
 796:	81 f4       	brne	.+32     	; 0x7b8 <GPIO_SetPinDirection+0x192>
 798:	21 b3       	in	r18, 0x11	; 17
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <GPIO_SetPinDirection+0x17e>
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	6a 95       	dec	r22
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <GPIO_SetPinDirection+0x17a>
 7a8:	98 2f       	mov	r25, r24
 7aa:	90 95       	com	r25
 7ac:	92 23       	and	r25, r18
 7ae:	91 bb       	out	0x11, r25	; 17
 7b0:	92 b3       	in	r25, 0x12	; 18
 7b2:	89 2b       	or	r24, r25
 7b4:	82 bb       	out	0x12, r24	; 18
 7b6:	08 95       	ret
 7b8:	42 30       	cpi	r20, 0x02	; 2
 7ba:	51 f4       	brne	.+20     	; 0x7d0 <GPIO_SetPinDirection+0x1aa>
 7bc:	21 b3       	in	r18, 0x11	; 17
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <GPIO_SetPinDirection+0x1a2>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	6a 95       	dec	r22
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <GPIO_SetPinDirection+0x19e>
 7cc:	82 2b       	or	r24, r18
 7ce:	81 bb       	out	0x11, r24	; 17
 7d0:	08 95       	ret

000007d2 <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
 7d2:	84 30       	cpi	r24, 0x04	; 4
 7d4:	08 f0       	brcs	.+2      	; 0x7d8 <GPIO_WritePin+0x6>
 7d6:	77 c0       	rjmp	.+238    	; 0x8c6 <__stack+0x67>
 7d8:	68 30       	cpi	r22, 0x08	; 8
 7da:	08 f0       	brcs	.+2      	; 0x7de <GPIO_WritePin+0xc>
 7dc:	74 c0       	rjmp	.+232    	; 0x8c6 <__stack+0x67>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	11 f1       	breq	.+68     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7e2:	30 f0       	brcs	.+12     	; 0x7f0 <GPIO_WritePin+0x1e>
 7e4:	82 30       	cpi	r24, 0x02	; 2
 7e6:	d1 f1       	breq	.+116    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 7e8:	83 30       	cpi	r24, 0x03	; 3
 7ea:	09 f4       	brne	.+2      	; 0x7ee <GPIO_WritePin+0x1c>
 7ec:	52 c0       	rjmp	.+164    	; 0x892 <__stack+0x33>
 7ee:	08 95       	ret
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
 7f0:	41 30       	cpi	r20, 0x01	; 1
 7f2:	59 f4       	brne	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
                    SET_BIT(PORTA,PIN);
 7f4:	2b b3       	in	r18, 0x1b	; 27
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	6a 95       	dec	r22
 802:	e2 f7       	brpl	.-8      	; 0x7fc <GPIO_WritePin+0x2a>
 804:	82 2b       	or	r24, r18
 806:	8b bb       	out	0x1b, r24	; 27
 808:	08 95       	ret
                else if(value == LOGIC_LOW)
 80a:	41 11       	cpse	r20, r1
 80c:	5c c0       	rjmp	.+184    	; 0x8c6 <__stack+0x67>
                    CLEAR_BIT(PORTA,PIN);
 80e:	2b b3       	in	r18, 0x1b	; 27
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	6a 95       	dec	r22
 81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81e:	80 95       	com	r24
 820:	82 23       	and	r24, r18
 822:	8b bb       	out	0x1b, r24	; 27
 824:	08 95       	ret
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
 826:	41 30       	cpi	r20, 0x01	; 1
 828:	59 f4       	brne	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
                    SET_BIT(PORTB,PIN);
 82a:	28 b3       	in	r18, 0x18	; 24
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	6a 95       	dec	r22
 838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 83a:	82 2b       	or	r24, r18
 83c:	88 bb       	out	0x18, r24	; 24
 83e:	08 95       	ret
                else if(value == LOGIC_LOW)
 840:	41 11       	cpse	r20, r1
 842:	41 c0       	rjmp	.+130    	; 0x8c6 <__stack+0x67>
                    CLEAR_BIT(PORTB,PIN);
 844:	28 b3       	in	r18, 0x18	; 24
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 854:	80 95       	com	r24
 856:	82 23       	and	r24, r18
 858:	88 bb       	out	0x18, r24	; 24
 85a:	08 95       	ret
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
 85c:	41 30       	cpi	r20, 0x01	; 1
 85e:	59 f4       	brne	.+22     	; 0x876 <__stack+0x17>
                    SET_BIT(PORTC,PIN);
 860:	25 b3       	in	r18, 0x15	; 21
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	6a 95       	dec	r22
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	82 2b       	or	r24, r18
 872:	85 bb       	out	0x15, r24	; 21
 874:	08 95       	ret
                else if(value == LOGIC_LOW)
 876:	41 11       	cpse	r20, r1
 878:	26 c0       	rjmp	.+76     	; 0x8c6 <__stack+0x67>
                    CLEAR_BIT(PORTC,PIN);
 87a:	25 b3       	in	r18, 0x15	; 21
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	6a 95       	dec	r22
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	80 95       	com	r24
 88c:	82 23       	and	r24, r18
 88e:	85 bb       	out	0x15, r24	; 21
 890:	08 95       	ret
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
 892:	41 30       	cpi	r20, 0x01	; 1
 894:	59 f4       	brne	.+22     	; 0x8ac <__stack+0x4d>
                    SET_BIT(PORTD,PIN);
 896:	22 b3       	in	r18, 0x12	; 18
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
 89e:	88 0f       	add	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	6a 95       	dec	r22
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
 8a6:	82 2b       	or	r24, r18
 8a8:	82 bb       	out	0x12, r24	; 18
 8aa:	08 95       	ret
                else if(value == LOGIC_LOW)
 8ac:	41 11       	cpse	r20, r1
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <__stack+0x67>
                    CLEAR_BIT(PORTD,PIN);
 8b0:	22 b3       	in	r18, 0x12	; 18
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	6a 95       	dec	r22
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
 8c0:	80 95       	com	r24
 8c2:	82 23       	and	r24, r18
 8c4:	82 bb       	out	0x12, r24	; 18
 8c6:	08 95       	ret

000008c8 <Timer0_SetCallBack>:
static volatile void (*g_CallBackPtr_T0)(void) = NULL_PTR;

    void Timer0_SetCallBack(void(*a_ptr)(void))
    {
        /* Save the address of the Call back function in a global variable */
        g_CallBackPtr_T0 = a_ptr;
 8c8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <g_CallBackPtr_T0+0x1>
 8cc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_CallBackPtr_T0>
 8d0:	08 95       	ret

000008d2 <__vector_11>:
    }

    #if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
        ISR(TIMER_0_OVF)
        {
 8d2:	1f 92       	push	r1
 8d4:	0f 92       	push	r0
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	0f 92       	push	r0
 8da:	11 24       	eor	r1, r1
 8dc:	2f 93       	push	r18
 8de:	3f 93       	push	r19
 8e0:	4f 93       	push	r20
 8e2:	5f 93       	push	r21
 8e4:	6f 93       	push	r22
 8e6:	7f 93       	push	r23
 8e8:	8f 93       	push	r24
 8ea:	9f 93       	push	r25
 8ec:	af 93       	push	r26
 8ee:	bf 93       	push	r27
 8f0:	ef 93       	push	r30
 8f2:	ff 93       	push	r31
            if(g_CallBackPtr_T0 != NULL_PTR)
 8f4:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <g_CallBackPtr_T0>
 8f8:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <g_CallBackPtr_T0+0x1>
 8fc:	30 97       	sbiw	r30, 0x00	; 0
 8fe:	09 f0       	breq	.+2      	; 0x902 <__vector_11+0x30>
            {
                g_CallBackPtr_T0();
 900:	09 95       	icall
            }
        }
 902:	ff 91       	pop	r31
 904:	ef 91       	pop	r30
 906:	bf 91       	pop	r27
 908:	af 91       	pop	r26
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	7f 91       	pop	r23
 910:	6f 91       	pop	r22
 912:	5f 91       	pop	r21
 914:	4f 91       	pop	r20
 916:	3f 91       	pop	r19
 918:	2f 91       	pop	r18
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <Timer0_UpdateValue>:



void Timer0_UpdateValue(uint8 Register_value)
{
    TCNT0 = Register_value;
 924:	82 bf       	out	0x32, r24	; 50
 926:	08 95       	ret

00000928 <Timer0_Init>:
void Timer0_Init(void)
{
    /*  Set Mode For Timer0    */
#if(TIMER0_CURRENT_MODE == T0_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR0,FOC0);
 928:	83 b7       	in	r24, 0x33	; 51
 92a:	80 68       	ori	r24, 0x80	; 128
 92c:	83 bf       	out	0x33, r24	; 51

    CLEAR_BIT(TCCR0,WGM00);
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	8f 7b       	andi	r24, 0xBF	; 191
 932:	83 bf       	out	0x33, r24	; 51
    CLEAR_BIT(TCCR0,WGM01);
 934:	83 b7       	in	r24, 0x33	; 51
 936:	87 7f       	andi	r24, 0xF7	; 247
 938:	83 bf       	out	0x33, r24	; 51
    #if(INTERUPT_STATE_T0 == Enable_Interrupt_T0)
        /*  Enable Global Interrupt  */
        SET_BIT(SREG , 7);
 93a:	8f b7       	in	r24, 0x3f	; 63
 93c:	80 68       	ori	r24, 0x80	; 128
 93e:	8f bf       	out	0x3f, r24	; 63
        /*  Enable overflow Interrupt  */
        SET_BIT(TIMSK,TOIE0);
 940:	89 b7       	in	r24, 0x39	; 57
 942:	81 60       	ori	r24, 0x01	; 1
 944:	89 bf       	out	0x39, r24	; 57

#endif


    /*  Set TCNT0 value to Zero*/
    Timer0_UpdateValue(0) ;
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	0e 94 92 04 	call	0x924	; 0x924 <Timer0_UpdateValue>
 94c:	08 95       	ret

0000094e <Timer0_StopClock>:
}


void Timer0_StopClock(void)
{
    TCCR0 = TCCR0 & (0xF8);
 94e:	83 b7       	in	r24, 0x33	; 51
 950:	88 7f       	andi	r24, 0xF8	; 248
 952:	83 bf       	out	0x33, r24	; 51
 954:	08 95       	ret

00000956 <Timer0_ProvideClock>:
}


void Timer0_ProvideClock(void)
{
    TCCR0 = (TCCR0 & 0xF8) | (TIMER0_ConfigTypeParam.TIMER0_CLK_value);
 956:	83 b7       	in	r24, 0x33	; 51
 958:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <TIMER0_ConfigTypeParam>
 95c:	88 7f       	andi	r24, 0xF8	; 248
 95e:	89 2b       	or	r24, r25
 960:	83 bf       	out	0x33, r24	; 51
 962:	08 95       	ret

00000964 <__vector_13>:
    uint16 Returned_value = 0;
    /*  Should read 9th bit of data if use 9 bit data before UDR*/
    Returned_value = ( (UCSRB & 0x02) << 7) ;
    Returned_value |= UDR ;
    return Returned_value;
}
 964:	1f 92       	push	r1
 966:	0f 92       	push	r0
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	0f 92       	push	r0
 96c:	11 24       	eor	r1, r1
 96e:	2f 93       	push	r18
 970:	3f 93       	push	r19
 972:	4f 93       	push	r20
 974:	5f 93       	push	r21
 976:	6f 93       	push	r22
 978:	7f 93       	push	r23
 97a:	8f 93       	push	r24
 97c:	9f 93       	push	r25
 97e:	af 93       	push	r26
 980:	bf 93       	push	r27
 982:	ef 93       	push	r30
 984:	ff 93       	push	r31
 986:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <g_CallBackPtr_Receive_USART>
 98a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <g_CallBackPtr_Receive_USART+0x1>
 98e:	30 97       	sbiw	r30, 0x00	; 0
 990:	09 f0       	breq	.+2      	; 0x994 <__vector_13+0x30>
 992:	09 95       	icall
 994:	ff 91       	pop	r31
 996:	ef 91       	pop	r30
 998:	bf 91       	pop	r27
 99a:	af 91       	pop	r26
 99c:	9f 91       	pop	r25
 99e:	8f 91       	pop	r24
 9a0:	7f 91       	pop	r23
 9a2:	6f 91       	pop	r22
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <USART_Init>:
 9b6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <USART_ConfigTypeParam+0x3>
 9ba:	81 11       	cpse	r24, r1
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <USART_Init+0x10>
 9be:	8a b1       	in	r24, 0x0a	; 10
 9c0:	88 60       	ori	r24, 0x08	; 8
 9c2:	8a b9       	out	0x0a, r24	; 10
 9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <USART_Init+0x2c>
 9c6:	81 30       	cpi	r24, 0x01	; 1
 9c8:	21 f4       	brne	.+8      	; 0x9d2 <USART_Init+0x1c>
 9ca:	8a b1       	in	r24, 0x0a	; 10
 9cc:	80 61       	ori	r24, 0x10	; 16
 9ce:	8a b9       	out	0x0a, r24	; 10
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <USART_Init+0x2c>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	31 f4       	brne	.+12     	; 0x9e2 <USART_Init+0x2c>
 9d6:	8a b1       	in	r24, 0x0a	; 10
 9d8:	80 61       	ori	r24, 0x10	; 16
 9da:	8a b9       	out	0x0a, r24	; 10
 9dc:	8a b1       	in	r24, 0x0a	; 10
 9de:	88 60       	ori	r24, 0x08	; 8
 9e0:	8a b9       	out	0x0a, r24	; 10
 9e2:	e6 e6       	ldi	r30, 0x66	; 102
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	41 81       	ldd	r20, Z+1	; 0x01
 9e8:	80 e1       	ldi	r24, 0x10	; 16
 9ea:	48 9f       	mul	r20, r24
 9ec:	a0 01       	movw	r20, r0
 9ee:	11 24       	eor	r1, r1
 9f0:	92 81       	ldd	r25, Z+2	; 0x02
 9f2:	29 2f       	mov	r18, r25
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	22 0f       	add	r18, r18
 9f8:	33 1f       	adc	r19, r19
 9fa:	22 0f       	add	r18, r18
 9fc:	33 1f       	adc	r19, r19
 9fe:	22 0f       	add	r18, r18
 a00:	33 1f       	adc	r19, r19
 a02:	90 81       	ld	r25, Z
 a04:	89 2f       	mov	r24, r25
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	40 68       	ori	r20, 0x80	; 128
 a0e:	24 2b       	or	r18, r20
 a10:	82 2b       	or	r24, r18
 a12:	80 bd       	out	0x20, r24	; 32
 a14:	2a b1       	in	r18, 0x0a	; 10
 a16:	90 81       	ld	r25, Z
 a18:	94 70       	andi	r25, 0x04	; 4
 a1a:	89 2f       	mov	r24, r25
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	88 0f       	add	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	92 2f       	mov	r25, r18
 a28:	9b 7f       	andi	r25, 0xFB	; 251
 a2a:	89 2b       	or	r24, r25
 a2c:	8a b9       	out	0x0a, r24	; 10
 a2e:	85 81       	ldd	r24, Z+5	; 0x05
 a30:	80 bd       	out	0x20, r24	; 32
 a32:	84 81       	ldd	r24, Z+4	; 0x04
 a34:	89 b9       	out	0x09, r24	; 9
 a36:	08 95       	ret

00000a38 <UART_receiveByteUnblocking>:


boolean UART_receiveByteUnblocking(uint8 * Data)
{
    boolean result = FALSE;
	if ( UCSRA & (1<<RXC) ){
 a38:	5f 9b       	sbis	0x0b, 7	; 11
 a3a:	05 c0       	rjmp	.+10     	; 0xa46 <UART_receiveByteUnblocking+0xe>
		(*Data) = UDR;
 a3c:	2c b1       	in	r18, 0x0c	; 12
 a3e:	fc 01       	movw	r30, r24
 a40:	20 83       	st	Z, r18
		result =  TRUE;		
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	08 95       	ret
	}
	else{
		result = FALSE;
 a46:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
 a48:	08 95       	ret

00000a4a <__udivmodsi4>:
 a4a:	a1 e2       	ldi	r26, 0x21	; 33
 a4c:	1a 2e       	mov	r1, r26
 a4e:	aa 1b       	sub	r26, r26
 a50:	bb 1b       	sub	r27, r27
 a52:	fd 01       	movw	r30, r26
 a54:	0d c0       	rjmp	.+26     	; 0xa70 <__udivmodsi4_ep>

00000a56 <__udivmodsi4_loop>:
 a56:	aa 1f       	adc	r26, r26
 a58:	bb 1f       	adc	r27, r27
 a5a:	ee 1f       	adc	r30, r30
 a5c:	ff 1f       	adc	r31, r31
 a5e:	a2 17       	cp	r26, r18
 a60:	b3 07       	cpc	r27, r19
 a62:	e4 07       	cpc	r30, r20
 a64:	f5 07       	cpc	r31, r21
 a66:	20 f0       	brcs	.+8      	; 0xa70 <__udivmodsi4_ep>
 a68:	a2 1b       	sub	r26, r18
 a6a:	b3 0b       	sbc	r27, r19
 a6c:	e4 0b       	sbc	r30, r20
 a6e:	f5 0b       	sbc	r31, r21

00000a70 <__udivmodsi4_ep>:
 a70:	66 1f       	adc	r22, r22
 a72:	77 1f       	adc	r23, r23
 a74:	88 1f       	adc	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	1a 94       	dec	r1
 a7a:	69 f7       	brne	.-38     	; 0xa56 <__udivmodsi4_loop>
 a7c:	60 95       	com	r22
 a7e:	70 95       	com	r23
 a80:	80 95       	com	r24
 a82:	90 95       	com	r25
 a84:	9b 01       	movw	r18, r22
 a86:	ac 01       	movw	r20, r24
 a88:	bd 01       	movw	r22, r26
 a8a:	cf 01       	movw	r24, r30
 a8c:	08 95       	ret

00000a8e <_exit>:
 a8e:	f8 94       	cli

00000a90 <__stop_program>:
 a90:	ff cf       	rjmp	.-2      	; 0xa90 <__stop_program>
